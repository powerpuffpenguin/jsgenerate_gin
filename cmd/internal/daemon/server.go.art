package daemon

import (
	"{{pkg}}/configure"
	"{{pkg}}/logger"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"go.uber.org/zap"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
)

// Server 定義服務器
type Server struct {
	http2Server *http2.Server
	httpServer  *http.Server
}

func runServer() {
	cnf := configure.DefaultConfigure().HTTP
	// listen tcp
	l, e := net.Listen(`tcp`, cnf.Addr)
	if e != nil {
		if ce := logger.Logger.Check(zap.FatalLevel, "listen"); ce != nil {
			ce.Write(
				zap.Error(e),
			)
		}
		os.Exit(1)
	}
	defer l.Close()
	// new server
	var server Server
	go func() {
		ch := make(chan os.Signal, 2)
		signal.Notify(ch,
			os.Interrupt,
			os.Kill,
			syscall.SIGTERM)
		for {
			sig := <-ch
			switch sig {
			case os.Interrupt:
				server.Stop()
				return
			case syscall.SIGTERM:
				server.Stop()
				return
			}
		}
	}()
	// serve
	if cnf.H2() {
		if ce := logger.Logger.Check(zap.InfoLevel, "h2 work"); ce != nil {
			ce.Write(
				zap.String("addr", cnf.Addr),
			)
		}
		server.ServeTLS(l, cnf.CertFile, cnf.KeyFile)
	} else {
		if ce := logger.Logger.Check(zap.InfoLevel, "h2c work"); ce != nil {
			ce.Write(
				zap.String("addr", cnf.Addr),
			)
		}
		server.Serve(l)
	}
}

// Stop Server
func (s *Server) Stop() {
	s.httpServer.Close()
}

// Serve as h2c
func (s *Server) Serve(l net.Listener) error {
	e := s.init()
	if e != nil {
		return e
	}

	s.httpServer.Handler = h2c.NewHandler(newHandler(), s.http2Server)
	e = s.httpServer.Serve(l)
	return e
}

// ServeTLS as h2
func (s *Server) ServeTLS(l net.Listener, certFile, keyFile string) error {
	e := s.init()
	if e != nil {
		return e
	}
	s.httpServer.Handler = newHandler()
	e = s.httpServer.ServeTLS(l, certFile, keyFile)
	return e
}

func (s *Server) init() (e error) {
	var httpServer http.Server
	var http2Server http2.Server
	// configure http2
	e = http2.ConfigureServer(&httpServer, &http2Server)
	if e != nil {
		return
	}
	s.httpServer = &httpServer
	s.http2Server = &http2Server
	return
}
