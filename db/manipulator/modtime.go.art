package manipulator

import (
	"{{pkg}}/db/data"{{if !db}}
    "sync"{{/if}}
	"strconv"
	"time"

	"errors"
)

const (
	// // ModtimeUser .
	// ModtimeUser = 1
)

{{if db}}
// SetLastModified .
func SetLastModified(id int32, modtime time.Time) (int64, error) {
	unix := modtime.Unix()
	return Engine().ID(id).Where(
		data.ColModtimeUnix+` < ?`, unix,
	).Cols(data.ColModtimeUnix).Update(&data.Modtime{
		Unix: unix,
	})
}

// LastModified .
func LastModified(id int32) (modtime time.Time, e error) {
	var tmp data.Modtime
	exists, e := Engine().ID(id).Get(&tmp)
	if e != nil {
		return
	} else if !exists {
		e = errors.New(`modtime id not exists : ` + strconv.FormatInt(int64(id), 10))
		return
	} else if tmp.Unix > 0 {
		modtime = time.Unix(tmp.Unix, 0)
	}
	return
}

// SetETag .
func SetETag(id int32, etag string) (int64, error) {
	return Engine().ID(id).Cols(data.ColModtimeUnix).Update(&data.Modtime{
		ETag: etag,
	})
}

// LastETag .
func LastETag(id int32) (etag string, e error) {
	var tmp data.Modtime
	exists, e := Engine().ID(id).Get(&tmp)
	if e != nil {
		return
	} else if exists {
		e = errors.New(`modtime id not exists : ` + strconv.FormatInt(int64(id), 10))
		return
	} else if tmp.Unix > 0 {
		etag = tmp.ETag
	}
	return
}
{{else}}
type _Modtime struct {
	keys map[int32]*data.Modtime
	sync.RWMutex
}

var _modtime = &_Modtime{
	keys: make(map[int32]*data.Modtime),
}

func (m *_Modtime) SetLastModified(id int32, modtime time.Time) (rows int64) {
	unix := modtime.Unix()
	m.Lock()
	if v, ok := m.keys[id]; ok {
		if v.Unix != unix {
			v.Unix = unix
			rows = 1
		}
	} else {
		m.keys[id] = &data.Modtime{
			Unix: unix,
		}
		rows = 1
	}
	m.Unlock()
	return
}
func (m *_Modtime) LastModified(id int32) (modtime time.Time, exists bool) {
	m.RLock()
	v, exists := m.keys[id]
	if exists && v.Unix > 0 {
		modtime = time.Unix(v.Unix, 0)
	}
	m.RUnlock()
	return
}
func (m *_Modtime) SetETag(id int32, etag string) (rows int64) {
	m.Lock()
	if v, ok := m.keys[id]; ok {
		if v.ETag != etag {
			v.ETag = etag
			rows = 1
		}
	} else {
		m.keys[id] = &data.Modtime{
			ETag: etag,
		}
		rows = 1
	}
	m.Unlock()
	return
}
func (m *_Modtime) LastETag(id int32) (etag string, exists bool) {
	m.RLock()
	v, exists := m.keys[id]
	if exists {
		etag = v.ETag
	}
	m.RUnlock()
	return
}

// SetLastModified .
func SetLastModified(id int32, modtime time.Time) (int64, error) {
	rows := _modtime.SetLastModified(id, modtime)
	return rows, nil
}

// LastModified .
func LastModified(id int32) (modtime time.Time, e error) {
	modtime, exists := _modtime.LastModified(id)
	if !exists {
		e = errors.New(`modtime id not exists : ` + strconv.FormatInt(int64(id), 10))
		return
	}
	return
}

// SetETag .
func SetETag(id int32, etag string) (int64, error) {
	rows := _modtime.SetETag(id, etag)
	return rows, nil
}

// LastETag .
func LastETag(id int32) (etag string, e error) {
	etag, exists := _modtime.LastETag(id)
	if !exists {
		e = errors.New(`modtime id not exists : ` + strconv.FormatInt(int64(id), 10))
		return
	}
	return
}
{{/if}}

// ModtimeHelper modtime update helper
type ModtimeHelper struct {
	id      int32
	modtime chan time.Time
	etag    chan string
}

// NewModtimeHelper new helper
func NewModtimeHelper(id int32, modtime, etag bool) *ModtimeHelper {
	helper := &ModtimeHelper{id: id}
	if modtime {
		helper.modtime = make(chan time.Time, 1)
		go helper.serveModified()
	}
	if etag {
		helper.etag = make(chan string, 1)
		go helper.serveETag()
	}
	return helper
}

// Init .
func (h *ModtimeHelper) Init(unix int64, etag, description string) (e error) {
{{if db}}
    engine := Engine()
	exists, e := engine.ID(h.id).Get(&data.Modtime{})
	if e != nil {
		return
	} else if !exists {
		_, e = engine.InsertOne(&data.Modtime{
			ID:          h.id,
			Unix:        unix,
			ETag:        etag,
			Description: description,
		})
		if e != nil {
			return
		}
	}
{{else}}
	_modtime.Lock()
	_modtime.keys[h.id] = &data.Modtime{
		Unix:        unix,
		ETag:        etag,
		Description: description,
	}
	_modtime.Unlock()
{{/if}}
    return
}

func (h *ModtimeHelper) serveModified() {
	for at := range h.modtime {
		SetLastModified(h.id, at)
	}
}
func (h *ModtimeHelper) serveETag() {
	for etag := range h.etag {
		SetETag(h.id, etag)
	}
}

// Modified set last modified
func (h *ModtimeHelper) Modified(modtime time.Time) {
	if h.modtime == nil {
		return
	}
	for {
		select {
		case h.modtime <- modtime:
			return
		default:
		}
		select {
		case <-h.modtime:
		default:
		}
	}
}

// ETag set last etag
func (h *ModtimeHelper) ETag(etag string) {
	if h.etag == nil {
		return
	}
	for {
		select {
		case h.etag <- etag:
			return
		default:
		}
		select {
		case <-h.etag:
		default:
		}
	}
}

// LastModified .
func (h *ModtimeHelper) LastModified() (time.Time, error) {
	return LastModified(h.id)
}

// LastETag .
func (h *ModtimeHelper) LastETag() (string, error) {
	return LastETag(h.id)
}